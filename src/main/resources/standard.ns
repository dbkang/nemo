let add = fun(a, b) {a + b};

let minus = fun(a, b) {a - b};

let list = fun() { args };

let null? = fun(e) { typeof(e) = "Unit" };

let map = fun(f, l) {
  if (null?(l))
    nil
  else
    cons(f(head(l)), map(f, tail(l)))
};

let filter = fun(f, l) {
  if (null?(l))
    nil
  else if (f(head(l)))
    cons(head(l), filter(f, tail(l)))
  else
    filter(f, tail(l))
};

let not = fun(b) {
  if (b) false else true
};

let append = fun(l1,l2) {
  if (null?(l1))
    l2
  else
    cons(head(l1),append(tail(l1),l2))
};


let foldleft = fun(f, z, l) {
  if (null?(l))
    z
  else
    foldleft(f, f(z, head(l)), tail(l))
};

let foldright = fun(f, z, l) {
  if (null?(l))
    z
  else
    f(head(l), foldright(f, z, tail(l)))
};

let flatmap = fun(f, l) {
  foldleft(append, nil, map(f, l))
};

let int? = fun(a) { typeof(a) = "Int" };

let double? = fun(a) { typeof(a) = "Double" };

let string? = fun(a) { typeof(a) = "String" };

let boolean? = fun(a) { typeof(a) = "Boolean" };

let primitive? = fun(a) { typeof(a) = "Primitive" };

let compose = fun() {
  let funs = args;
  if (null?(funs))
    fun () {args}
  else if (null?(tail(funs)))
    head(funs)
  else
    fun () {(head(funs))(apply(apply(compose, tail(funs)), args))}
};

